# .github/workflows/deploy-helm-gke.yml
name: Despliegue de RabbitMQ Operator

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (dev, prod)"
        required: true
        default: dev
#  push:
#    branches:
#      - main

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT }}
  GKE_REGION: ${{ vars.GKE_ZONE }}
  GKE_CLUSTER: ${{ vars.GKE_CLUSTER }}
  OPERATOR_VERSION: v2.8.0
  K8S_NAMESPACE: messaging 
  HELM_CHART_PATH: charts/rabbitmq-cluster # Ruta a tu Chart dentro del repo
  HELM_RELEASE_NAME: rabbitmq-instance
  OPERATOR_PATH: operators/rabbitmq-cluster
  IMAGE_TAG: ${{ github.sha }} 
  # Se asume que tienes un Secret llamado GCP_SA_KEY para la autenticación
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # Necesario para OIDC si usas Workload Identity
      
    steps:
      - name: 1. Checkout Repository
        uses: actions/checkout@v4

      # -----------------------------------------------------------
      # FASE I: AUTENTICACIÓN Y HERRAMIENTAS
      # -----------------------------------------------------------
      - name: 2. Autenticación con Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          # Usar clave de SA o Workload Identity (preferido)
          credentials_json: ${{ secrets.GCP_SA_KEY }} 

      - name: 3. Configurar Conexión a GKE (Kubeconfig)
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_REGION }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Install/Upgrade RabbitMQ Cluster Operator (pinned version)
        run: |
          set -euo pipefail
          kubectl apply -f "https://github.com/rabbitmq/cluster-operator/releases/download/${OPERATOR_VERSION}/cluster-operator.yml" 
          kubectl -n rabbitmq-system rollout status deploy/rabbitmq-operator --timeout=5m
        env:
          LOG_LEVEL: debug

      - name: Apply RabbitMQ CRs (Cluster, Policy, User/Perms)
        run: |
          set -euo pipefail
          kubectl apply -n ${{env.K8S_NAMESPACE}} -f ${{env.OPERATOR_PATH}}/rabbitmqcluster.yaml
          kubectl apply -n ${{env.K8S_NAMESPACE}} -f ${{env.OPERATOR_PATH}}/policy-quorum.yaml
          kubectl apply -n ${{env.K8S_NAMESPACE}} -f ${{env.OPERATOR_PATH}}/user-permissions.yaml