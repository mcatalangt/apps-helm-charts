name: Deploy RabbitMQ single

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (dev, prod)"
        required: true
        default: dev
#  push:
#    branches:
#      - main

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT }}
  GKE_REGION: ${{ vars.GKE_ZONE }}
  GKE_CLUSTER: ${{ vars.GKE_CLUSTER }}
  OPERATOR_VERSION: latest
  K8S_NAMESPACE: messaging 
  HELM_RELEASE_NAME: rabbitmq-instance
  OPERATOR_PATH: operators/rabbitmq-cluster
  IMAGE_TAG: ${{ github.sha }} 
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write 
      
    steps:
      - name: 1. Checkout Repository
        uses: actions/checkout@v4

      - name: 2. Autenticación con Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }} 

      - name: 3. Configurar Conexión a GKE (Kubeconfig)
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_REGION }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Instalar Krew
        run: |
          # Descargar e instalar Krew
          (
            set -x; cd "$(mktemp -d)" &&
            curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/krew-linux_amd64.tar.gz" &&
            tar zxvf krew-linux_amd64.tar.gz &&
            ./krew-linux_amd64 install krew
          )

      - name: Instalar Plugins 
        run: |
          export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
          kubectl krew  
          kubectl krew install rabbitmq

      - name: Install RabbitMQ Cluster Operator
        run: |
          set -euo pipefail
          export PATH="$HOME/.krew/bin:$PATH"
          kubectl rabbitmq install-cluster-operator
          kubectl -n rabbitmq-system rollout status deploy/rabbitmq-cluster-operator --timeout=5m
        env:
          LOG_LEVEL: debug


      - name: Install/Upgrade RabbitMQ Messaging Topology Operator
        run: |
          kubectl apply -f "https://github.com/rabbitmq/messaging-topology-operator/releases/latest/download/messaging-topology-operator.yaml"
          kubectl -n rabbitmq-system rollout status deploy/messaging-topology-operator --timeout=5m
        env:
          LOG_LEVEL: debug
#      - name: Apply RabbitMQ CRs (Cluster, Policy, User/Perms)
#        run: |
#            kubectl create secret generic rabbitmq-admin-creds -n messaging \
#            --from-literal=username=admin \
#            --from-literal=password=admin

      - name: Apply RabbitMQ CRs (Cluster, Policy, User/Perms)
        run: |
          set -euo pipefail
           kubectl apply -n ${{env.K8S_NAMESPACE}} -f ${{env.OPERATOR_PATH}}/rabbitmq-helloworld.yaml
#          kubectl apply -n ${{env.K8S_NAMESPACE}} -f ${{env.OPERATOR_PATH}}/policy-quorum.yaml
#          kubectl apply -n ${{env.K8S_NAMESPACE}} -f ${{env.OPERATOR_PATH}}/user-permissions.yaml
        env:
            LOG_LEVEL: debug

#      - name: Create/Update app-user Secret from GitHub Secret
#        run: |
#          set -euo pipefail
#          kubectl -n "${K8S_NAMESPACE}" create secret generic app-user-secret \
#            --from-literal=username=app \
#            --from-literal=password="${{ secrets.RABBITMQ_APP_PASSWORD }}" \
#            --dry-run=client -o yaml | kubectl apply -f -

#      - name: Wait for RabbitMQ Cluster to be Available
#        run: |
#          kubectl -n "${K8S_NAMESPACE}" wait --for=condition=Available=True rabbitmqcluster/rmq --timeout=10m

#      - name: Show status (pods, svc, CRs)
#        run: |
#          kubectl -n "${K8S_NAMESPACE}" get pods,svc
#          kubectl -n "${K8S_NAMESPACE}" get rabbitmqclusters.rabbitmq.com